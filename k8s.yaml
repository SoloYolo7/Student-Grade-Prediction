---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-__PROJECT_NAME__
  labels:
    app: api-__PROJECT_NAME__
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-__PROJECT_NAME__
  template:
    metadata:
      labels:
        app: api-__PROJECT_NAME__
        version: v1
    spec:
      # volumes:
      #     - name: api-__PROJECT_NAME__
      #       # configMap:
      #       #   name: api-__PROJECT_NAME__ # specifies the ConfigMap to use for the volume
      containers:
        - name: api-__PROJECT_NAME__
          image: __API__VERSION__
          ports:
            - containerPort: 8000
          # volumeMounts:
          #   - name: api-__PROJECT_NAME__
          #     mountPath: /etc/nginx
          #     readOnly: true
          resources:
            limits:
              cpu: 1
              memory: 2Gi
            requests:
              cpu: 0.5
              memory: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: api-__PROJECT_NAME__
spec:
  selector:
    app: api-__PROJECT_NAME__
  type: NodePort
  ports:
    - name: http
      port: 80 # port for external access to the service
      targetPort: 8000
      # protocol: TCP
      # nodePort: 30800 # The range of valid ports is 30000-32767
---
apiVersion: apps/v1 # specifies the API version for the Deployment resource
kind: Deployment # defines the type of Kubernetes resource being created
metadata:
  name: ui-__PROJECT_NAME__ # the name of the deployment to identify this deployment resource
  labels:
    app: ui-__PROJECT_NAME__ # key-value pairs that can be used to organize and select resources
    version: v1
spec: # defines the desired state for the deployment
  replicas: 2 # specifies that 3 replicas (pods) of the application should be running
  selector:
    matchLabels:
      app: ui-__PROJECT_NAME__ # criteria for selecting the pods that this deployment will manage (it selects pods with the label app: web)
  template: # describes the pods that will be created by the deployment
    metadata:
      labels:
        app: ui-__PROJECT_NAME__ # labels assigned to the pods created by this deployment (must match the selector labels)
        version: v1
    spec: # defines the specification for the pod template
      # volumes:
      #   - name: ui-__PROJECT_NAME__
      #     configMap:
      #       name: ui-__PROJECT_NAME__ # specifies the ConfigMap to use for the volume
      containers: # lists the containers that will be running inside the pods
        - name: ui-__PROJECT_NAME__ # the name of the container
          image: __UI__VERSION__ # the Docker image used for this container
          ports:
            - containerPort: 8002 # specifies that port 80 should be exposed on the container
          # volumeMounts:
          #   - name: ui-__PROJECT_NAME__
          #     mountPath: /etc/nginx
          #     readOnly: true  
          resources:
            limits:
              cpu: 1
              memory: 2Gi
            requests:
              cpu: 0.5
              memory: 1Gi

---
apiVersion: v1 # specifies the API version for the Service resource
kind: Service
metadata:
  name: ui-__PROJECT_NAME__
spec:
  selector:
    app: ui-__PROJECT_NAME__
  type: NodePort
  ports:
    - name: http
      port: 80 # port for external access to the service
      targetPort: 8002
      # protocol: TCP
      # nodePort: 30850 # The range of valid ports is 30000-32767

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-__PROJECT_NAME__
data:
  nginx.conf: |
    worker_processes auto;
    events {
    }
    http {
      server {
        listen 80 ;
        location = /api-__PROJECT_NAME__ {
          proxy_pass http://api-__PROJECT_NAME__;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
      }
    }



---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ui-__PROJECT_NAME__
data:
  nginx.conf: |
    worker_processes auto;
    events {
      worker_connections 1024;
    }
    http {
      include       mime.types;
      default_type  application/octet-stream;
      sendfile        on;
      keepalive_timeout  65;
      server {
        listen 80;
        server_name __DOMAIN_NAME__ www.__DOMAIN_NAME__;
        location /ui-__PROJECT_NAME__ {
          proxy_pass http://ui-__PROJECT_NAME__;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
      }
    }

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: alb-__PROJECT_NAME__ 
  annotations:
    ingress.alb.yc.io/subnets: __ALB_INGRESS_SUBNET__  # One or more subnets hosting the Application Load Balancer L7 load balancer.
    ingress.alb.yc.io/security-groups: __ALB_INGRESS_SEC_GROUP__  # Security group for the Application Load Balancer L7 load balancer. 
    ingress.alb.yc.io/external-ipv4-address: __ALB_INGRESS_EXT_IP__ #Public access to the load balancer from the internet. #Enter the obtained IP address or set auto to get a new IP address automatically
    ingress.alb.yc.io/group-name: __PROJECT_NAME__-ingress-group # Group name. Ingress resources are grouped together, each group served by a separate load balancer.
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
spec:
  tls:
    - hosts:
        - __DOMAIN_NAME__ # Domain name for which the certificate is issued
      secretName: yc-certmgr-cert-id-__TLS_ID__ # Secret ID in Certificate Manager
  rules:
    - host: __DOMAIN_NAME__
      http:
        paths:
          - path: /api-__PROJECT_NAME__ # path to the service, get from  location
            pathType: Prefix
            backend:
              service:
                name: api-__PROJECT_NAME__
                port:
                  number: 80
          - path: /ui-__PROJECT_NAME__
            pathType: Prefix
            backend:
              service:
                name: ui-__PROJECT_NAME__
                port:
                  number: 80
