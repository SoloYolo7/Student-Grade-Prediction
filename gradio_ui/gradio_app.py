import gradio as gr
import pandas as pd
import requests
import os
from datetime import datetime

# 1) –°–¥–µ–ª–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–º–∏ —á–µ—Ä–µ–∑ env (—É–¥–æ–±–Ω–æ –¥–ª—è dev/prod)  ‚Üê
API_URL = os.getenv("API_URL", "http://api-student-grade-prediction/predict-single")
ROOT_PATH = os.getenv("GRADIO_ROOT_PATH", "/ui-student-grade-prediction")  # ‚Üê

def get_predictions(uploaded_file):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ API,
    –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –≥–æ—Ç–æ–≤–∏—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    """
    if uploaded_file is None:
        raise gr.Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª.")

    # 2) –ù–∞–¥—ë–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∏–∑ gr.File (–ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã)  ‚Üê
    file_path = getattr(uploaded_file, "name", None)
    if file_path is None and isinstance(uploaded_file, dict):
        file_path = uploaded_file.get("name")
    if file_path is None:
        file_path = str(uploaded_file)

    try:
        # 3) UTF-8 —Å BOM —Ç–æ–∂–µ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç—Å—è (—á–∞—Å—Ç–æ –∏–∑ Excel)  ‚Üê
        df_original = pd.read_csv(file_path, encoding="utf-8-sig")
    except Exception as e:
        raise gr.Error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CSV. –û—à–∏–±–∫–∞: {e}")

    records_for_api = df_original.to_dict(orient='records')
    payload = {"features": records_for_api}

    try:
        response = requests.post(API_URL, json=payload, headers={"Content-Type": "application/json"})
        response.raise_for_status()
        predictions = response.json().get('predictions')
    except requests.exceptions.ConnectionError:
        raise gr.Error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É {API_URL}")
    except requests.exceptions.HTTPError as e:
        raise gr.Error(f"API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        raise gr.Error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")

    if predictions is None:
        raise gr.Error("API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

    df_with_predictions = df_original.copy()
    df_with_predictions['Predicted_Grade'] = predictions

    output_dir = "outputs"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    base_filename = os.path.splitext(os.path.basename(file_path))[0]  # ‚Üê
    csv_path = os.path.join(output_dir, f"{base_filename}_{timestamp}.csv")
    excel_path = os.path.join(output_dir, f"{base_filename}_{timestamp}.xlsx")

    df_with_predictions.to_csv(csv_path, index=False)

    # 4) –ï—Å–ª–∏ –≤ –æ–±—Ä–∞–∑–µ –Ω–µ—Ç openpyxl ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å engine –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å  ‚Üê
    df_with_predictions.to_excel(excel_path, index=False)  # engine='openpyxl' –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å

    return df_with_predictions, gr.update(visible=True, value=csv_path), gr.update(visible=True, value=excel_path)

with gr.Blocks(theme=gr.themes.Soft(), title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫") as demo:
    gr.Markdown("# üîÆ –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    gr.Markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏—Ö –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫.")

    with gr.Row():
        with gr.Column(scale=1):
            file_input = gr.File(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à CSV —Ñ–∞–π–ª", file_types=[".csv"])
            btn_predict = gr.Button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", variant="primary")

            btn_download_csv = gr.File(label="–°–∫–∞—á–∞—Ç—å CSV", visible=False)
            btn_download_excel = gr.File(label="–°–∫–∞—á–∞—Ç—å Excel", visible=False)

        with gr.Column(scale=2):
            df_output = gr.DataFrame(label="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏")

    btn_predict.click(
        fn=get_predictions,
        inputs=file_input,
        outputs=[df_output, btn_download_csv, btn_download_excel]
    )

if __name__ == "__main__":
    # 5) –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å  ‚Üê
    demo.launch(server_name="0.0.0.0", server_port=8002, root_path=ROOT_PATH)