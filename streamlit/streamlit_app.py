import streamlit as st
import pandas as pd
import requests
import io
import os

st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫",
    page_icon="üîÆ",
    layout="wide"
)

API_URL = os.getenv("API_URL", "http://127.0.0.1:8000/predict-single")

def convert_df_to_csv(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ CSV –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    return df.to_csv(index=False).encode('utf-8')

def convert_df_to_excel(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ Excel (–≤ –ø–∞–º—è—Ç–∏) –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Predictions')
    processed_data = output.getvalue()
    return processed_data


st.title("üîÆ –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏—Ö –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫ –æ—Ç –º–æ–¥–µ–ª–∏.")

uploaded_file = st.sidebar.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª",
    type=['csv'],
    help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å –º–æ–¥–µ–ª—å—é."
)

if uploaded_file is not None:
    try:
        df_original = pd.read_csv(uploaded_file)
        st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df_original.head())

        with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ API –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π..."):
            
            records_for_api = df_original.to_dict(orient='records')
            payload = {"features": records_for_api}

            try:
                response = requests.post(API_URL, json=payload, headers={"Content-Type": "application/json"})
                response.raise_for_status()
                
                predictions = response.json().get('predictions')
                
                if predictions:
                    st.success("üéâ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")
                    df_with_predictions = df_original.copy()
                    df_with_predictions['Predicted_Grade'] = predictions
                    
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏")
                    st.dataframe(df_with_predictions)

                    st.sidebar.subheader("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                    
                    csv_data = convert_df_to_csv(df_with_predictions)
                    excel_data = convert_df_to_excel(df_with_predictions)

                    col1, col2 = st.columns(2)
                    with col1:
                        st.sidebar.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV",
                            data=csv_data,
                            file_name=f"predictions_{uploaded_file.name}",
                            mime='text/csv',
                        )
                    with col2:
                        st.sidebar.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ Excel",
                            data=excel_data,
                            file_name=f"predictions_{uploaded_file.name.replace('.csv', '.xlsx')}",
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                        )

                else:
                    st.error("–û—à–∏–±–∫–∞: API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

            except requests.exceptions.ConnectionError:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –ø–æ –∞–¥—Ä–µ—Å—É {API_URL}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
            except requests.exceptions.HTTPError as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ—Ç API: {e.response.status_code} - {e.response.text}")
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")

    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CSV. –û—à–∏–±–∫–∞: {e}")